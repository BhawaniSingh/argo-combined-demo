---
# Source: upstream-deps/charts/minio/templates/post-install-prometheus-metrics-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kubecon-demo-minio-update-prometheus-secret
  labels:
    app: minio-update-prometheus-secret
    chart: minio-7.2.1
    release: kubecon-demo
    heritage: Helm
---
# Source: upstream-deps/charts/minio/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "kubecon-demo-minio"
  labels:
    app: minio
    chart: minio-7.2.1
    release: "kubecon-demo"
---
# Source: upstream-deps/charts/minio/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: kubecon-demo-minio
  labels:
    app: minio
    chart: minio-7.2.1
    release: kubecon-demo
    heritage: Helm
type: Opaque
data:
  accesskey: "YWRtaW4="
  secretkey: "cGFzc3dvcmQ="
---
# Source: upstream-deps/charts/minio/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: kubecon-demo-minio
  labels:
    app: minio
    chart: minio-7.2.1
    release: kubecon-demo
    heritage: Helm
data:
  initialize: |-
    #!/bin/sh
    set -e ; # Have script exit in the event of a failed command.
    MC_CONFIG_DIR="/etc/minio/mc/"
    MC="/usr/bin/mc --config-dir ${MC_CONFIG_DIR}"
    
    # connectToMinio
    # Use a check-sleep-check loop to wait for Minio service to be available
    connectToMinio() {
      SCHEME=$1
      ATTEMPTS=0 ; LIMIT=29 ; # Allow 30 attempts
      set -e ; # fail if we can't read the keys.
      ACCESS=$(cat /config/accesskey) ; SECRET=$(cat /config/secretkey) ;
      set +e ; # The connections to minio are allowed to fail.
      echo "Connecting to Minio server: $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT" ;
      MC_COMMAND="${MC} config host add myminio $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT $ACCESS $SECRET" ;
      $MC_COMMAND ;
      STATUS=$? ;
      until [ $STATUS = 0 ]
      do
        ATTEMPTS=`expr $ATTEMPTS + 1` ;
        echo \"Failed attempts: $ATTEMPTS\" ;
        if [ $ATTEMPTS -gt $LIMIT ]; then
          exit 1 ;
        fi ;
        sleep 2 ; # 1 second intervals between attempts
        $MC_COMMAND ;
        STATUS=$? ;
      done ;
      set -e ; # reset `e` as active
      return 0
    }
    
    # checkBucketExists ($bucket)
    # Check if the bucket exists, by using the exit code of `mc ls`
    checkBucketExists() {
      BUCKET=$1
      CMD=$(${MC} ls myminio/$BUCKET > /dev/null 2>&1)
      return $?
    }
    
    # createBucket ($bucket, $policy, $purge)
    # Ensure bucket exists, purging if asked to
    createBucket() {
      BUCKET=$1
      POLICY=$2
      PURGE=$3
      VERSIONING=$4
    
      # Purge the bucket, if set & exists
      # Since PURGE is user input, check explicitly for `true`
      if [ $PURGE = true ]; then
        if checkBucketExists $BUCKET ; then
          echo "Purging bucket '$BUCKET'."
          set +e ; # don't exit if this fails
          ${MC} rm -r --force myminio/$BUCKET
          set -e ; # reset `e` as active
        else
          echo "Bucket '$BUCKET' does not exist, skipping purge."
        fi
      fi
    
      # Create the bucket if it does not exist
      if ! checkBucketExists $BUCKET ; then
        echo "Creating bucket '$BUCKET'"
        ${MC} mb myminio/$BUCKET
      else
        echo "Bucket '$BUCKET' already exists."
      fi
    
    
      # set versioning for bucket
      if [ ! -z $VERSIONING ] ; then
        if [ $VERSIONING = true ] ; then
            echo "Enabling versioning for '$BUCKET'"
            ${MC} version enable myminio/$BUCKET
        elif [ $VERSIONING = false ] ; then
            echo "Suspending versioning for '$BUCKET'"
            ${MC} version suspend myminio/$BUCKET
        fi
      else
          echo "Bucket '$BUCKET' versioning unchanged."
      fi
    
      # At this point, the bucket should exist, skip checking for existence
      # Set policy on the bucket
      echo "Setting policy of bucket '$BUCKET' to '$POLICY'."
      ${MC} policy set $POLICY myminio/$BUCKET
    }
    
    # Try connecting to Minio instance
    scheme=http
    connectToMinio $scheme
    # Create the bucket
    createBucket photos public false
---
# Source: upstream-deps/charts/minio/templates/post-install-prometheus-metrics-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: kubecon-demo-minio-update-prometheus-secret
  labels:
    app: minio-update-prometheus-secret
    chart: minio-7.2.1
    release: kubecon-demo
    heritage: Helm
rules:
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - get
      - create
      - update
      - patch
    resourceNames:
      - kubecon-demo-minio-prometheus
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - create
  - apiGroups:
      - monitoring.coreos.com
    resources:
      - servicemonitors
    verbs:
      - get
    resourceNames:
      - kubecon-demo-minio
---
# Source: upstream-deps/charts/minio/templates/post-install-prometheus-metrics-rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: kubecon-demo-minio-update-prometheus-secret
  labels:
    app: minio-update-prometheus-secret
    chart: minio-7.2.1
    release: kubecon-demo
    heritage: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: kubecon-demo-minio-update-prometheus-secret
subjects:
  - kind: ServiceAccount
    name: kubecon-demo-minio-update-prometheus-secret
---
# Source: upstream-deps/charts/minio/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: kubecon-demo-minio
  labels:
    app: minio
    chart: minio-7.2.1
    release: kubecon-demo
    heritage: Helm
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 9000
      protocol: TCP
      targetPort: 9000
  selector:
    app: minio
    release: kubecon-demo
---
# Source: upstream-deps/charts/minio/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kubecon-demo-minio
  labels:
    app: minio
    chart: minio-7.2.1
    release: kubecon-demo
    heritage: Helm
spec:
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 0
  selector:
    matchLabels:
      app: minio
      release: kubecon-demo
  template:
    metadata:
      name: kubecon-demo-minio
      labels:
        app: minio
        release: kubecon-demo
      annotations:
        checksum/secrets: 3f8bdfc677b3b898baff15419aae9908c1af9ba1d8b20e3bdb2151cd0f7baa0c
        checksum/config: 98f4bdcc743767fc6601392057ddd0d3f945234d411c2dcae488c00f9c051613
    spec:
      serviceAccountName: "kubecon-demo-minio"
      containers:
        - name: minio
          image: "minio/minio:RELEASE.2020-10-09T22-55-05Z"
          imagePullPolicy: IfNotPresent
          command:
            - "/bin/sh"
            - "-ce"
            - "/usr/bin/docker-entrypoint.sh minio -S /etc/minio/certs/ server /export"
          volumeMounts:            
          ports:
            - name: http
              containerPort: 9000
          env:
            - name: MINIO_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: kubecon-demo-minio
                  key: accesskey
            - name: MINIO_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: kubecon-demo-minio
                  key: secretkey
            - name: MINIO_API_READY_DEADLINE
              value: "5s"
          livenessProbe:
            httpGet:
              path: /minio/health/live
              port: http
              scheme: HTTP
            initialDelaySeconds: 120
            periodSeconds: 15
            timeoutSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          resources:
            requests:
              memory: 4Gi      
      volumes:
        - name: export
          emptyDir: {}
        - name: minio-user
          secret:
            secretName: kubecon-demo-minio
---
# Source: upstream-deps/charts/minio/templates/post-install-create-bucket-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: kubecon-demo-minio-make-bucket-job
  labels:
    app: minio-make-bucket-job
    chart: minio-7.2.1
    release: kubecon-demo
    heritage: Helm
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
spec:
  template:
    metadata:
      labels:
        app: minio-job
        release: kubecon-demo
    spec:
      restartPolicy: OnFailure      
      volumes:
        - name: minio-configuration
          projected:
            sources:
            - configMap:
                name: kubecon-demo-minio
            - secret:
                name: kubecon-demo-minio
      serviceAccountName: "kubecon-demo-minio"
      containers:
      - name: minio-mc
        image: "minio/mc:RELEASE.2020-10-03T02-54-56Z"
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh", "/config/initialize"]
        env:
          - name: MINIO_ENDPOINT
            value: kubecon-demo-minio
          - name: MINIO_PORT
            value: "9000"
        volumeMounts:
          - name: minio-configuration
            mountPath: /config
        resources:
          requests:
            memory: 128Mi
